name: Run Luau tests

on: 
  workflow_dispatch:
  push:
    branches:
      - production
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    paths:
      - "src/**"
      - "pesde.toml"
      - "development.project.json"
      - ".github/workflows/run-luau-tests.yml"

concurrency:
  group: ${{ github.workflow }}

jobs:
  build:
    if: ${{ !github.event.pull_request.draft }}
    name: Build testing place
    uses: dialoguemaker/workflows/.github/workflows/build-rojo-project.yml@main
    with:
      rojo_project_file_name: development.project.json
    
  publish:
    name: Deploy testing place to Roblox
    runs-on: ubuntu-24.04
    timeout-minutes: 2
    needs: build
    steps:
      - name: Download project
        uses: actions/download-artifact@v4.1.8
        with:
          name: build.rbxl

      - name: POST to Roblox API
        env:
          ROBLOX_API_KEY: ${{ secrets.ROBLOX_DEPLOYMENT_API_KEY }}
          ROBLOX_UNIVERSE_ID: ${{ vars.ROBLOX_UNIVERSE_ID }}
          ROBLOX_PLACE_ID: ${{ vars.ROBLOX_PLACE_ID }}
        run: | 
          curl \
          --fail-with-body \
          -H "x-api-key: $ROBLOX_API_KEY" \
          -H "Content-Type: application/xml" \
          --data-binary @build.rbxl \
          "https://apis.roblox.com/universes/v1/""$ROBLOX_UNIVERSE_ID""/places/""$ROBLOX_PLACE_ID""/versions?versionType=Published"

  test:
    runs-on: ubuntu-24.04
    name: Run test cases
    timeout-minutes: 2
    needs: publish
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Execute script
        uses: grand-hawk/action-roblox-luau-execution@v1.0.1
        with:
          roblox_api_key: ${{ secrets.ROBLOX_DEPLOYMENT_API_KEY }}
          universe_id: ${{ vars.ROBLOX_UNIVERSE_ID }}
          place_id: ${{ vars.ROBLOX_PLACE_ID }}
          luau_file: "runTests.luau"
          output_file: "testResults.json"
          dump_to_summary: true

      - name: Verify all tests passed
        uses: actions/github-script@v7
        with:
          script: |
            try {

              const outputFile = require("./testResults.json");
              const testResults = outputFile[0];
              if (!testResults) {

                throw new Error("No test results found.");

              }

              for (const test of testResults) {
              
                if (!test.didPass) {
                
                  throw new Error("A test case failed.");

                }

              }
            
            } catch (error) {
            
              core.setFailed(error);
            
            }